#!/usr/bin/env bash

instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
region=$(
  curl -s http://169.254.169.254/latest/dynamic/instance-identity/document |
  grep region | sed -r 's/.* : "([0-9a-z-]+)".*$/\1/g')

log() {
  echo [$(date --iso-8601=seconds)] $*
}

wait_for_volume_to_be_available() {
  sleep 2 # this is the hacky way of doing all of this
}

attach_volume() {
  local lsblk_old_output_file=/tmp/lsblk-before-attach-$(date +%s)
  lsblk | grep disk > $lsblk_old_output_file

  aws --region=$region ec2 attach-volume --volume-id $1 --instance-id $instance_id --device /dev/sdf

  if [ $? != 0 ]; then
    log "$1 failed to attach"
    return
  fi

  local limit=50
  local retries=1

  while (lsblk | grep disk | diff $lsblk_old_output_file - > /dev/null) && [ $retries -lt $limit ]; do
    sleep 0.2
    retries=$((retries+1))
  done

  if [ $retries != $limit ]; then
    local volume=/dev/$(
      lsblk | grep disk | diff -u $lsblk_old_output_file - |
      grep '^+' | grep -v '^+++' |
      sed 's/^\+//' | awk '{print $1}'
    )

    until [ -b $volume ]; do sleep 1; done

    log "$1 attached to $volume"
  else
    log "$1 timeout while attaching"
  fi

  rm $lsblk_old_output_file
}

format_volume_with_xfs() {
  # When booting the instance for the first time the EBS volume will not be
  # properly formated. Format it but make sure it happens only on the first boot.
  if [ "$(file -s $1)" == "$1: data" ]; then
    mkfs -t xfs $1 && log "$1 formatted"
  else
    log "$1 already formatted"
  fi
}

mount_volume() {
  if ! (mount | grep /dev/xvdf > /dev/null) ; then
    mkdir -p $2 && mount $1 $2 && log "$1 mounted to $2"
  else
    log "$1 already mounted to $2"
  fi
}

setup_mongodb_server() {
  chown -R mongodb:mongodb $1 && \
    sed -i "s|dbPath:.*|dbPath: $1|" /etc/mongod.conf && \
    sed -i "s|bindIp:.*|bindIp: 0.0.0.0|" /etc/mongod.conf && \
    systemctl start mongod.service && \
    log "MongoDB started with db path $1"
}

complete_lifecycle_action() {
  aws --region $region autoscaling complete-lifecycle-action \
    --lifecycle-hook-name attach-storage-volume-and-launch \
    --lifecycle-action-result CONTINUE \
    --instance-id  $instance_id \
    --auto-scaling-group-name "$1" && log 'Lifecycle action completed'
}

attach_output=$(attach_volume ${volume_id})

if ! echo $attach_output | grep attached > /dev/null; then
  echo "$attach_output"
  exit 1
fi

volume_device=$(echo $attach_output | sed 's/.*attached to //')

wait_for_volume_to_be_available && \
  format_volume_with_xfs $volume_device && \
  mount_volume $volume_device /mnt/data && \
  setup_mongodb_server /mnt/data && \
  complete_lifecycle_action ${autoscalling_group_name}
